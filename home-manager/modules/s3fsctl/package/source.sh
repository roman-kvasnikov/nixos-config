#!/usr/bin/env bash

# –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–ª—è bash
set -euo pipefail
IFS=$'\n\t'

# =============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏
readonly CONFIG_DIR="@configDirectory@"
readonly CONFIG_FILE="@configFile@"
readonly PASSWORD_FILE="@passwordFile@"
readonly MOUNT_POINT="@mountPoint@"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ (ANSI escape codes)
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m' # No Color

# =============================================================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –í–´–í–û–î–ê
# =============================================================================

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[i]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1" >&2
}

print_header() {
    echo -e "${PURPLE}$1${NC}"
}

print_status() {
    echo -e "${CYAN}$1${NC}"
}

# =============================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ò
# =============================================================================

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –æ—Ç root
check_user() {
    if [ "$(id -u)" -eq 0 ]; then
        print_error "This script should not be run as root"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing_deps=()

    if ! command -v jq >/dev/null 2>&1; then
        missing_deps+=("jq")
    fi

    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        print_error "Make sure jq is installed"
        exit 1
    fi
}

# =============================================================================
# –†–ê–ë–û–¢–ê –° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô
# =============================================================================

# –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
ensure_config() {
    mkdir -p "$CONFIG_DIR"

    if [ ! -f "$CONFIG_FILE" ]; then
        local example_file="$CONFIG_DIR/config.example.json"

        if [ ! -f "$example_file" ]; then
            print_error "Example config file not found: $example_file"
            exit 1
        fi

        print_info "Creating default config from example..."
        cp "$example_file" "$CONFIG_FILE"
        print_success "Config created at: $CONFIG_FILE"
    fi
}

# –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É—Ç–∏)
get_config_value() {
    local field="$1"  # "bucket", "url", "usePathRequestStyle", "dbglevel"

    ensure_config

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º jq –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ—á–µ—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é)
    jq -r ".$field // empty" "$CONFIG_FILE" 2>/dev/null
}

# –°–æ–∑–¥–∞—Ç—å NetworkManager L2TP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
mount() {
    local bucket url usePathRequestStyle dbglevel

    bucket=$(get_config_value "bucket")
    url=$(get_config_value "url")
    usePathRequestStyle=$(get_config_value "usePathRequestStyle")
    dbglevel=$(get_config_value "dbglevel")

    print_info "Mounting S3 bucket: $bucket ..."

    # –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if mount | grep -q "$MOUNT_POINT"; then
        print_warning "S3 bucket already mounted at $MOUNT_POINT"
        return
    fi

    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p "$MOUNT_POINT"

    # –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å S3 bucket
    s3fs "$bucket" "$MOUNT_POINT" \
        -o passwd_file="$PASSWORD_FILE" \
        -o url="$url" \
        -o use_path_request_style="$usePathRequestStyle" \
        -o dbglevel="$dbglevel" \
        -f

    print_success "S3 bucket mounted successfully"
}

unmount() {
    print_info "Unmounting S3 bucket: $MOUNT_POINT ..."
    umount "$MOUNT_POINT"
    print_success "S3 bucket unmounted successfully"
}

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# =============================================================================

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
main() {
    local command="${1:-}"

    case "$command" in
        mount)
            mount
        ;;
        unmount)
            unmount
        ;;
        *)
            show_help
            exit 1
            ;;
    esac
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    print_header "üè† S3FS Management Tool"
    echo ""
    print_info "Usage: s3fsctl {command}"
    echo ""

    print_status "üöÄ Quick commands:"
    echo -e "  ${GREEN}mount${NC}                Mount S3 bucket"
    echo -e "  ${RED}unmount${NC}             Unmount S3 bucket"
    echo ""

    print_status "üí° Example usage:"
    echo -e "  s3fsctl mount     # Mount S3 bucket"
    echo -e "  s3fsctl unmount  # Unmount S3 bucket"
    echo ""

    print_info "Configuration file: $CONFIG_FILE"
    print_info "Required format:"
    print_info "  {"
    print_info "    \"bucket\": \"bucket-name\","
    print_info "    \"url\": \"https://s3.example.com\","
    print_info "    \"usePathRequestStyle\": false,"
    print_info "    \"dbglevel\": \"debug\""
    print_info "  }"
}

# =============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# =============================================================================

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
check_user
check_dependencies

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
main "$@"